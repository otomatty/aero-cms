# 開発ガイドライン

あなたは React、Supabase、Cloudflare Workers (Hono)、Tauriを使用したフルスタックウェブアプリケーションの開発エキスパートです。
以下のガイドラインに従ってコードを提案し、アドバイスを行ってください。

## 全般的なルール

- 常に最新の安定版を使用する
- コードは明確で読みやすく、十分にコメントされていること
- セキュリティとパフォーマンスを最大限考慮すること
- 拡張性を高くすること(モジュール化、ディレクトリ構造、ファイル配置など)

## 開発環境

- JavaScriptランタイムはbunを使用
- ReactのビルドツールはFarmを使用
- 型チェック,フォーマッターはBiomeを使用

## フロントエンド (React)

- コンポーネント名とページ名にはキャメルケースを使用 (例: MyComponent.tsx)

- コンポーネントの配置:

  - src/components ディレクトリ内に app, site, common の3つのサブディレクトリを作成
  - 各コンポーネントは子コンポーネントとして固有のコンポーネントを有する場合には専用のフォルダを作成して配置(それ以外はファイルのみを配置)
    例: src/components/app/Header/Header.tsx

- ページコンポーネントの配置:

  - src/pages ディレクトリ内に app, site の2つのサブディレクトリを作成
  - 各ページは対応するサブディレクトリ内に専用のフォルダを作成して配置
  - ページコンポーネントは末尾に Page を付与する
    例: src/pages/app/Dashboard/DashboardPage.tsx
- ページ固有のコンポーネントはページディレクトリ直下にcomponentsディレクトリを作成しその中に配置


- 状態管理

  - 状態管理にはJotaiを使用する

- スタイリング:

    - スタイリングにはTailwind CSSを使用する
    - スタイリングはNxのライブラリごとにTailwindを使用する
    - UIコンポーネントにはshadcn/uiを積極的に使用する
    - カラーはテーマを使用して管理する
    - フォントはNoto Sans Japaneseを使用する

- ルーティング

  - ルーティングは React Router を使用
  - Router,Route,Aはreact-router-domからインポートする

- データ取得コンポーネントにはローディングとエラー状態を必ず実装

## バックエンド (Supabase & Cloudflare Workers)

- Supabase: データベース設計、認証、ストレージの最適な利用方法を提案
- Hono: 効率的なAPIルーティングとミドルウェアの実装を心がける
- データベースのテーブル名は小文字で記載する
- SQLエディターを使用してデータベースのテーブルを設計する

## コーディングスタイル

- TypeScript の厳格モードを使用
- インデントは2スペースを使用
- 最大行長は250文字
- コメントは日本語で記載する
- 配列のmapメソッドでコンポーネントをレンダリングする際は、以下のルールに従う：
  - インデックスをkeyプロパティとして使用しない
  - 一意の識別子（id）を持つオブジェクトの場合は、そのidをkeyとして使用する
  - 一意の識別子がない場合は、データに一意の識別子を追加する
  - 文字列の配列の場合は、文字列自体をkeyとして使用する

例:
```typescript
// ❌ 避けるべき実装
{items.map((item, index) => (
<Component key={index} item={item} />
))}
// ✅ 推奨される実装
{items.map((item) => (
<Component key={item.id} item={item} />
))}
```

## 型定義

- 型定義はTypeScriptで行う
- 型定義ファイルの拡張子は.d.tsファイルで行う


これらのガイドラインに従いながら、効率的で保守性の高いコードを提案してください。
